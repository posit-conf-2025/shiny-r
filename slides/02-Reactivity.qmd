---
title: "Reactivity"
author: "Colin Rundel"
format: 
  revealjs:
    logo: images/shiny.png
    footer: "posit::conf 2025 - Introduction to Shiny for R"
    slide-number: true
    highlight-style: a11y
    theme: [default, custom.scss]
    self-contained: true
execute:
  echo: true
title-slide-attributes:
    data-background-image: "images/Atlanta_Skyline.jpg"
    data-background-size: cover
    data-background-opacity: "0.33"
---

# Basic Reactivity

## Reactive elements

::: {.code-file .sourceCode .cell-code}
`r fontawesome::fa("file")` `demos/demo01.R`
:::
::: {.code-half}
```{r}
#| eval: false
#| code-line-numbers: "|10-20|11|22"
#| file: "../demos/demo01.R"
```
:::


::: {style="width:100%; height: 30%; text-align: center;"}
::: {style="width:50%; display: inline-block; text-align: center;"}
![](images/diag-1.png){fig-align="center" width="75%"}
:::
:::

Our *inputs* and *outputs* are defined by the elements in our `ui`.


## Reactive graph

::: {.code-file .sourceCode .cell-code}
`r fontawesome::fa("file")` `demos/demo01.R`
:::
::: {.code-half}
```{r}
#| eval: false
#| code-line-numbers: "|26-31|26,28"
#| file: "../demos/demo01.R"
```
:::


::: {style="width:100%; height: 30%; text-align: center;"}
::: {style="width:50%; display: inline-block; text-align: center;"}
![](images/diag-2.png){fig-align="center" width="75%"}
:::
:::

The *reactive logic* is defined in our `server` function - `shiny` takes care of figuring out what depends on what.


## Demo 02 - Adding an input

::: {.code-file .sourceCode .cell-code}
`r fontawesome::fa("file")` `demos/demo02.R`
:::
```{r}
#| eval: false
#| file: "../demos/demo02.R"
#| code-line-numbers: "|7-12|27-30|32|36-42|39|41"
```

## `.data` pronoun

One aspect of the improved code that you might not be familiar with is the use of `.data[[input$var]]` within  `renderPlot()`. 

This is a useful feature from `rlang` that can be used across much of the tidyverse to reference columns in a data frame using a variable. 

It helps avoid some of the complexity around "non-standard evaluation" (e.g. `{{`, `!!`, `enquo()`, etc.) when working with functions built with tidyeval (e.g. `dplyr` and `ggplot2`).


::: aside
For more details see the rlang [.data and .env pronouns](https://rlang.r-lib.org/reference/dot-data.html) article.
:::


## Reactive graph

With these additions, what should our reactive graph look like now?

. . .

::: {style="width:100%; text-align: center;"}
::: {style="width:40%; display: inline-block; text-align: center;"}
![](images/diag-3.png){fig-align="center" width="100%"}
:::
:::


## Your turn - Exercise 03

Starting with the code  in `exercises/ex03.R` (based on `demo02.R`'s code) add a `tableOutput()` with the id `minmax` to the app's `mainPanel()`.

Once you have done that you should then add logic to the `server` function to render a table that shows the min and max *average temperature* for each year contained in these data.

- You will need to add an appropriate output in the `ui` 
- and a corresponding reactive expression in the `server` function to generate these summaries.
- `lubridate::year()` will be useful along with `dplyr::summarize()`.


```{r}
#| echo: false
countdown::countdown(12)
```


## Reactive graph (again)

<br/>

::: {style="width:100%; text-align: center;"}
::: {style="width:60%; display: inline-block; text-align: center;"}
![](images/diag-4.png){fig-align="center" width="100%"}
:::
:::

## reactlog

Another (more detailed) way of seeing the reactive graph (dynamically) for your app is using the `reactlog` package.


Run the following to log and show all of the reactive events occuring within `ex03_soln.R`, 

<br/>

```{r}
#| eval: false
reactlog::reactlog_enable()
(source(here::here("exercises/solutions/ex03_soln.R")))
shiny::reactlogShow()
```


# `reactive()`

## DRY (Don't repeat yourself)

Some of you may have noticed that in `ex03_soln.R` we have a tiny bit of repeated code - specifically the filtering of `d` to get the data for the selected airport. 

While this is not a big deal here, it can become problematic in more complex apps.


::: {.code-file .sourceCode .cell-code}
`r fontawesome::fa("file")` `exercises/solutions/ex03_soln.R`
:::
::: {.code-halfish}
```{r}
#| eval: false
#| code-line-numbers: "|38-39,46-47"
#| file: ../exercises/solutions/ex03_soln.R
```
:::


## Demo 03 - Enter `reactive()`

::: {.code-file .sourceCode .cell-code}
`r fontawesome::fa("file")` `demos/demo03.R`
:::
```{r}
#| eval: false
#| code-line-numbers: "|36-60|37-40|42-47|43|49-59|50"
#| file: ../demos/demo03.R
```

## Another reactive expressions

This is an example of a "reactive conductor" - it is a new type of reactive expression that exists between sources (e.g. an input) and endpoints (e.g. an output).

As such, a `reactive()` depends on various upstream inputs, returns a value of some kind which is used by 1 or more downstream outputs (or other conductors).

. . .

Their primary use is similar to a function in an R script, they help to

- avoid repeating ourselves

- decompose complex computations into smaller / more modular steps

- improve computational efficiency by breaking up / simplifying reactive dependencies


## `reactive()` tips

- Expressions are written in the same way as `render*()` functions

. . .

- If `react_obj = reactive({...})` then any consumer 
  must access value using `react_obj()` and *not* `react_obj`
    - think of `react_obj` as a function that returns the current value
    - Common cause of ~~everyone's~~ my favorite R error ,
      
      ``` 
      ## Error: object of type 'closure' is not subsettable`
      ```

. . .

- Like `input` reactive expressions may only be used within reactive contexts (e.g. `render*()`, `reactive()`, `observer()`, etc.)
  
  ```
  ## Error: Operation not allowed without an active reactive context. (You tried to do something that can only be done from inside a reactive expression or observer.)
  ```

## Reactive graph

```{mermaid}
#| include: false
flowchart LR
  subgraph outputs
  out1[plot]
  out2[minmax]
  end
  subgraph reactives
  react1{{d_city}}
  end
  subgraph inputs
  in1([city]) 
  in2([var])
  end
  in1 --> react1
  react1 --> out1 & out2
  in2 --> out1 & out2
```

<br/><br/>

::: {style="width:100%; text-align: center;"}
::: {style="width:80%; display: inline-block; text-align: center;"}
![](images/diag-5.png){fig-align="center" width="100%"}
:::
:::


# observers

## `observer()`

These are the final reactive expression we will be discussing today. They are constructed in the same way as a `reactive()` however an observer does not return a value, instead they are used for their *side effects*.

* The side effects in most cases involve sending data to the client broswer, e.g. updating a UI element

* While not obvious given their syntax - the results of the `render*()` functions are observers.


## Demo 04 - Filtering by region

::: {.code-file .sourceCode .cell-code}
`r fontawesome::fa("file")` `demos/demo04.R`
:::
```{r}
#| eval: false
#| code-line-numbers: "|17-20|21-24|36-44"
#| file: ../demos/demo04.R
```

## Reactive graph

<p/>

::: {style="width:100%; text-align: center;"}
::: {style="width:90%; display: inline-block; text-align: center;"}
![](images/diag-6.png){fig-align="center" width="90%"}
:::
:::


## Reactive graph - implicit

<p/>

::: {style="width:100%; text-align: center;"}
::: {style="width:90%; display: inline-block; text-align: center;"}
![](images/diag-6_anno.png){fig-align="center" width="90%"}
:::
:::


## Using `req()`

You may have notices that the App initializes with "West" selected for `region` but no initial selection for `name` because of this we have some warnings generated in the console:

```{r}
#| eval: false
#| code-line-numbers: false

# Warning: There were 2 warnings in `summarize()`.
# The first warning was:
# ℹ In argument: `min temp = min(temp_min)`.
# Caused by warning in `min()`:
# ! no non-missing arguments to min; returning Inf
# ℹ Run dplyr::last_dplyr_warnings() to see the 1 remaining warning.
```

. . .

This is a common occurrence with Shiny, particularly at initialization or when a user enters bad / unexpected input(s).

A good way to protect against this is to validate inputs before using them - the simplest way is to use `req()` which checks if a value is [truthy](https://shiny.rstudio.com/reference/shiny/latest/isTruthy.html) and prevent further execution if not.


## Your turn - Exercise 04

Using the code provided in `exercise/ex04.R` (based on `demo/demo04.R`) as a starting point add the calls to `req()` necessary to avoid the initialization warnings. 

Also, think about if there are any other locations in our app where `req()` might be useful.

*Hint* - thinking about how events "flow" through the reactive graph will be helpful here.


```{r}
#| echo: false
countdown::countdown(10)
```



## A note on observers

Reactive graphs are meant to be acyclic, that is they should not have circular dependencies. 

The use of observers can introduce cycles which can then lead to infinite loops, see the following example:

```{r}
#| eval: false
library(shiny)

ui = fluidPage(
  numericInput("n", "n", 0)
)

server = function(input, output, session) {
  observeEvent(input$n, {
    updateNumericInput(inputId = "n", value = input$n + 1)
  })
}

shinyApp(ui=ui, server=server)
```

::: {.aside}
From [Mastering Shiny](https://mastering-shiny.org/action-dynamic.html#circular-references)
:::




